using System;

using System.Collections.Generic;

using System.ComponentModel;

using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using System.Net.Sockets;
using System.Net;
using System.Threading;
namespace MyChatRoomClient
{
    public partial class FChatClient : Form
    {
        public FChatClient()
        {
            InitializeComponent();
            TextBox.CheckForIllegalCrossThreadCalls = false;
        }

        Thread threadClient = null; //客户端 负责 接收 服务端发来的数据消息的线程
        Socket socketClient = null;//客户端套接字

		//客户端发送连接请求到服务器
        private void btnConnect_Click(object sender, EventArgs e)
        {
            IPAddress address = IPAddress.Parse(txtIP.Text.Trim());//获得IP
            IPEndPoint endpoint = new IPEndPoint(address, int.Parse(txtPort.Text.Trim()));//网络节点
			//创建客户端套接字
            socketClient = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            //向 指定的IP和端口 发送连接请求
            socketClient.Connect(endpoint);
            //客户端 创建线程 监听服务端 发来的消息
            threadClient = new Thread(RecMsg);
            threadClient.IsBackground = true;
            threadClient.Start();
        }

        /// <summary>
		/// 监听服务端 发来的消息
		/// </summary>
        void RecMsg()
        {
            while (true)
            {
                //定义一个 接收用的 缓存区(2M字节数组)
                byte[] arrMsgRec = new byte[1024 * 1024 * 2];
                //将接收到的数据 存入 arrMsgRec 数组,并返回 真正接收到的数据 的长度
               int length=  socketClient.Receive(arrMsgRec);
                //此时 是将 数组 所有的元素 都转成字符串，而真正接收到的 只有服务端发来的几个字符
               string strMsgRec = System.Text.Encoding.UTF8.GetString(arrMsgRec, 0, length);
                ShowMsg(strMsgRec);
            }
        }

        void ShowMsg(string msg)
        {
            txtMsg.AppendText(msg + "\r\n");
        }
    }
}